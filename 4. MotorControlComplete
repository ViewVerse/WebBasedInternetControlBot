from machine import Pin, PWM
from time import sleep
import urequests  # Use urequests for ESP8266/ESP32
import network
import json  # Import for JSON handling

# Motor pins
in1 = Pin(3, Pin.OUT)  # IN3 connected to GPIO 14
in2 = Pin(4, Pin.OUT)  # IN4 connected to GPIO 15
enb1 = PWM(Pin(2))
enb1.freq(1000)
in3 = Pin(6, Pin.OUT)  # IN3 connected to GPIO 14
in4 = Pin(7, Pin.OUT)  # IN4 connected to GPIO 15
enb2 = PWM(Pin(8))      # ENB connected to GPIO 13 for PWM control
enb2.freq(1000)          # Set PWM frequency to 1 kHz

# WiFi credentials
WIFI_SSID = "ccl"
WIFI_PASSWORD = "alpha109"

# Firebase credentials
DATABASE_URL = "https://botcontrolling-default-rtdb.asia-southeast1.firebasedatabase.app"
FIREBASE_AUTH = "5lsGlHTkKufVqSp9xHGbEhZAzQokPLeiCfHvbMSv"  # Optional for basic security

# Connect to WiFi
def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    if not wlan.isconnected():
        print("Connecting to WiFi...")
        wlan.connect(WIFI_SSID, WIFI_PASSWORD)
        while not wlan.isconnected():
            sleep(1)
            print("Still connecting...")
    print("Connected to WiFi!")
    print("IP Address:", wlan.ifconfig()[0])

# Retrieve data from Firebase
def retrieve_data(path):
    url = f"{DATABASE_URL}/{path}.json"
    if FIREBASE_AUTH:
        url += f"?auth={FIREBASE_AUTH}"

    try:
        response = urequests.get(url)
        if response.status_code == 200:
            print("Data retrieved from Firebase")
            data = response.json()
            response.close()
            return data
        else:
            print(f"Failed to retrieve data. Status code: {response.status_code}")
            response.close()
            return None
    except Exception as e:
        print(f"Error retrieving data: {e}")
        return None

# Motor functions
def motor_forward(speed):
    in1.low()         
    in2.high() 
    in3.high()          
    in4.low()          
    enb1.duty_u16(speed) 
    enb2.duty_u16(speed)
def motor_backward(speed):
    in1.high()         
    in2.low() 
    in3.low()          
    in4.high()          
    enb1.duty_u16(speed) 
    enb2.duty_u16(speed)
def motor_right(speed):
    in1.low()         
    in2.high() 
    in3.low()          
    in4.high()          
    enb1.duty_u16(speed) 
    enb2.duty_u16(speed)
def motor_left(speed):
    in1.high()         
    in2.low() 
    in3.high()          
    in4.low()          
    enb1.duty_u16(speed) 
    enb2.duty_u16(speed) 
def motor_stop():
    in1.low()         
    in2.low() 
    in3.low()          
    in4.low()          
    enb1.duty_u16(0) 
    enb2.duty_u16(0) # Main loop to test motor# Main loop to test motor
    
# Main function
def main():
    connect_wifi()  # Connect to WiFi before running the loop
    while True:
        data = int(retrieve_data("Movement/value"))
        i=data
        if i==1:
            print("Moving forward")
            motor_forward(32768)  # Set speed to 50% (PWM value)
        elif i==0:    
            print("Stopping")
            motor_stop()
        elif i== 2:
            print("Moving backward")
            motor_backward(32768)  # Set speed to 50% (PWM value)
        elif i== 4:
            print("Moving right")
            motor_right(32768)  # Set speed to 50% (PWM value)
        elif i== 3:
            print("Moving left")
            motor_left(32768)  # Set speed to 50% (PWM value)     
        if data is not None:
            print("Retrieved data:", data)
        else:
            print("No data retrieved or an error occurred")
        sleep(0.2)

# Run the main function
if __name__ == "__main__":
    main()

